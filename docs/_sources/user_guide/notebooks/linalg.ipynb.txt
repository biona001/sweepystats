{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5438baec-65a6-4bff-96cd-208aa9c3d28d",
   "metadata": {},
   "source": [
    "# Numerical linear algebra\n",
    "\n",
    "The following operations are supported **in-place** and **allocation-free**\n",
    "\n",
    "+ Matrix inversion in $n^3$ flops. Recall that inversion by Cholesky costs $(5/3)n^3$ flops and needs to allocate a matrix of same size.\n",
    "+ Computation of determinant\n",
    "+ Check (strict) positive definiteness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0441e58e-cd80-4c7c-820c-7d66b372e3f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sweepystats as sw\n",
    "import numpy as np\n",
    "\n",
    "def random_symmetric_matrix(n, eigmin=float('-inf')):\n",
    "    \"\"\"\n",
    "    Simulates a n*n symmetric matrix with minimum eigenvalue set to `eigmin`.\n",
    "    The resulting matrix is stored in column-major format.\n",
    "    \"\"\"\n",
    "    A = np.random.rand(n, n)\n",
    "    A = 0.5 * (A + A.T)\n",
    "    # force eigenvalues to be >= eigmin\n",
    "    if eigmin > float('-inf'):\n",
    "        eval, evec = np.linalg.eig(A)\n",
    "        eval[np.where(eval < 0)[0]] = eigmin\n",
    "        A = evec * np.diag(eval) * evec.T\n",
    "    # convert to column major\n",
    "    return np.array(A, order='F')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a2d295f-60dc-4fee-bc3c-503f472368e1",
   "metadata": {},
   "source": [
    "## Matrix inverses\n",
    "\n",
    "If `A` is full rank, `A.sweep()` converts `A.A` into `-inv(A.A)`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ca6ba069-4dc2-46b1-ba1a-8d12bc322c8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████| 100/100 [00:00<00:00, 13296.26it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# simulated data\n",
    "data = random_symmetric_matrix(100)\n",
    "\n",
    "# true inverse\n",
    "Ainv = np.linalg.inv(data)\n",
    "\n",
    "# sweep\n",
    "A = sw.SweepMatrix(data)\n",
    "A.sweep()\n",
    "\n",
    "# check answer is correct\n",
    "np.allclose(A.A, -Ainv)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58ff9d4d-3c4b-4adb-8bf4-aa2f444743f4",
   "metadata": {},
   "source": [
    "## Determinants\n",
    "\n",
    "Determinants are computed by `A.det()`. The original matrix is untouched by default. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5ef8d3e0-749c-4015-9dbb-f1f4f49fba61",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████| 100/100 [00:00<00:00, 151255.10it/s]\n",
      "100%|██████████████████████████████████████| 100/100 [00:00<00:00, 144931.03it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# simulate data\n",
    "data = random_symmetric_matrix(100)\n",
    "\n",
    "# true determinant\n",
    "Adet = np.linalg.det(data)\n",
    "\n",
    "# sweep\n",
    "A = sw.SweepMatrix(data)\n",
    "det = A.det()\n",
    "\n",
    "# check answer is correct\n",
    "np.allclose(det, Adet)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75a11b86-fcc5-4310-83df-e684543e2395",
   "metadata": {},
   "source": [
    "## Checking of positive definiteness\n",
    "\n",
    "This is a PD matrix:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "880dcfff-58d2-4631-91df-ad5ba4cd6dad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sw.SweepMatrix(random_symmetric_matrix(100, eigmin=0.00001)) # this is PD\n",
    "A.isposdef(tol=1e-15, verbose=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7986a565-4de0-4108-a356-60fd412f2660",
   "metadata": {},
   "source": [
    "Simulate a matrix with negative eigenvalues:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b3a668f3-57e3-49aa-b5d8-7c9daa407883",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sw.SweepMatrix(random_symmetric_matrix(100, eigmin=-10)) # should return false\n",
    "A.isposdef(verbose=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "846c38db-1810-4001-8cc8-17e02a3a91ca",
   "metadata": {},
   "source": [
    "Simulate a matrix with 0 as eigenvalue:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c4be6181-7f02-452a-b984-8baf7037c208",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sw.SweepMatrix(random_symmetric_matrix(100, eigmin=0.0)) # this is PSD, should return false\n",
    "A.isposdef(verbose=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bb27403-db4b-4016-b094-86aaca6351a1",
   "metadata": {},
   "source": [
    "## Matrix rank:\n",
    "\n",
    "Less well known is that the sweep operator can also be used to compute the rank of a matrix, by counting how many diagonals are non-zero prior to sweeping. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9dd8fe73-2da2-4277-ae7a-cc0a1b2e68c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████| 123/123 [00:00<00:00, 57836.25it/s]\n",
      "100%|███████████████████████████████████████| 123/123 [00:00<00:00, 56351.65it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "62"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sw.SweepMatrix(random_symmetric_matrix(123, eigmin=0.0))\n",
    "A.rank()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a324a0e-ab2b-4e54-a6ea-d2fbc08019fd",
   "metadata": {},
   "source": [
    "Check answer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "39b64741-a8d8-4357-abcf-0c60505f7449",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(62)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linalg.matrix_rank(A.A)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
